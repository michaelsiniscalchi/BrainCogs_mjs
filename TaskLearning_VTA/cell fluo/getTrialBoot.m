function [ bootAvg, bootRep ] = getTrialBoot ( trial_dff, x, subset_label, params)
%%% getTrialBoot
%
%PURPOSE:  
%AUTHORS:   MJ Siniscalchi 190911
%
%INPUT ARGUMENTS
%   trial_dff:      Matrix of aligned dF/F signals, eg, generated by 'alignCellFluo.m'
%                       with rows taken only from the relevant subset of trials.
%   x:              Domain (time or position relative to trigger)
%   subset_label:   Character array identifying 
%   params.window:  the time window around which to align signal
%
%   params.CI:                  confidence interval (CI)
%   params.numBootstrapRepeat:  number of bootstrap repeats to estimate CI
%
%OUTPUTS
%
%
%--------------------------------------------------------------------------
%%

% Unpack some variables from structure
nTrials = size(trial_dff,1);
nReps = params.nReps;
CI = params.CI;
    
%% Estimate mean dF/F and confidence intervals using the bootstrap
if nTrials
    bootRep = NaN(nReps,size(trial_dff,2)); %An array of bootstrap replicates
    for i = 1:nReps
        %Draw a random sample with replacement and estimate mean
        bootSample = trial_dff(randsample(nTrials,nTrials,'true'),:);
        bootRep(i,:) = mean(bootSample,1,"omitnan");
    end
else
    bootRep = nan(size(trial_dff)); %If no trials
end

%Estimate grand mean and confidence interval
bootAvg.subset_label = subset_label;
bootAvg.signal = mean(bootRep,1,"omitnan"); %Or use trial avg instead of boot avg
bootAvg.CI(1,:) = prctile(bootRep,50+CI/2,1);
bootAvg.CI(2,:) = prctile(bootRep,50-CI/2,1);
bootAvg.N = nTrials;
    
%Obtain scalar estimates from bootstrap replicates
if params.getScalarEstimates

    stats = getTrialBootScalarEstimates(bootRep, x, params);
    
    %Append to bootAvg structure
    fields = string(fieldnames(stats));
    for f = fields'
        bootAvg.(f) = stats.(f);
    end
end
